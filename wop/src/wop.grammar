use wop::Token;

token "*=" Token::VarSpec;
token "+=" Token::RepSpec;
token "=" Token::NormalSpec;
token "?=" Token::OptSpec;

token ":" Token::Type;
token "@" Token::MetaAttr;
token "~" Token::BoxAttr;
token "|" Token::Or;
token "::" Token::PathAccess;
token ";" Token::Sep;
token Ident Token::Ident;
token StrLit Token::StrLit;
token CodeExpr Token::CodeExpr;

Program = Program Declaration Sep | Declaration Sep;

Declaration = TokenDecl | UseDecl | RuleDecl;

TokenDecl = TokenWord StrLit IdentPath
    | TokenWord Ident IdentPath;

IdentPath = IdentPath PathAccess Ident
    | Ident;

UseDecl = UseWord IdentPath;

AssignOp = VarSpec | RepSpec | OptSpec | NormalSpec;

AttrPrefix = MetaAttr
    | BoxAttr
    | MetaAttr AttrPrefix
    | BoxAttr AttrPrefix;

AttrSuffix = Opt | Var | Rep;

VarPipe = Type Ident;

TypeDecl = Type IdentPath;

ElmBase = Ident VarPipe
    | Ident
    | OpenParen RulePipe CloseParen
    | OpenParen RulePipe CloseParen VarPipe;

Elm = AttrPrefix ElmBase AttrSuffix
    | ElmBase AttrSuffix
    | AttrPrefix ElmBase
    | ElmBase;

Prod = Prod Elm
    | Prod Elm CodeExpr
    | Elm CodeExpr
    | Elm;

RulePipeRepeater = RulePipeRepeater Prod Or
    | Prod Or;

RulePipe = RulePipeRepeater Prod
    | Prod;

RuleDecl = Ident TypeDecl AssignOp RulePipe;
    | Ident AssignOp RulePipe;
