use crate::Sym::*;
use crate::Ast;

alias ";" Sc;
alias "::" PathAccess;
alias "=" Assign;
alias "alias" AliasWord;
alias "use" UseWord;
alias "*" Glob;
alias ":" TwoDots;
alias "(" OpenParen;
alias ")" CloseParen;
alias "?" Optional;

EntryPoint: Ast = Program -> { Ast::EntryPoint(Box::new(toks[0].clone())) }% ;

Program: Ast = Program (Import | Alias | RuleDecl) ";" -> { 
    let program = &toks[0];
    let extension = toks[1].clone();
    let mut program_vec = match program.item.item {
        Ast::Program(ref v) => v.clone(),
        _ => unreachable!(),
    };
    program_vec.push(extension);
    Ast::Program(program_vec)
}% 
    |  (Alias | Import | RuleDecl) ";" -> { Ast::Program(toks[..1].to_vec()) }% ;

IdentPath: Ast = IdentPath PathAccess Ident -> {
    let ip = toks[0].clone();
    let extension = toks[2].clone();
    let span = Span::new(ip.item.span.start, extension.item.span.end);
    Ast::IdentPath(span)
}%
    | Ident -> { Ast::IdentPath(toks[0].item.span) }%;

RuleDecl: Ast = IdentPath ":" IdentPath "=" Rule -> {
    let ident = toks[0].item.item.get_src_ref().unwrap();
    let ty = toks[2].item.item.get_src_ref().unwrap();
    let rule_vec = match toks[4].item.item {
        Ast::Rule(ref v) => v.clone(),
        _ => unreachable!(),
    };
    Ast::RuleDecl((ident, ty, rule_vec))
}%;

Rule: Ast = Rule Pipe RulePipe CodeBlock?:cb -> {
    let mut rule_vec = match toks[0].item.item {
        Ast::Rule(ref vv) => vv.clone(),
        _ => unreachable!(),
    };
    match toks[2].item.item {
        Ast::RulePipe(ref v) => rule_vec.push((v.clone(), cb.map_or(|| Span::new(0, 0), |g| g.item.span))),
        _ => unreachable!(),
    };
    Ast::Rule(rule_vec)
}%
    | RulePipe CodeBlock?:cb -> {
    let Ast::RulePipe(ref prod) = toks[0].item.item else {
        unreachable!()
    };
    Ast::Rule(vec![(prod.clone(), cb.map_or(|| Span::new(0, 0), |g| g.item.span))])
}%;

RulePipe: Ast = RulePipe RuleItem -> {
    let mut v = match toks[0].item.item {
        Ast::RulePipe(ref v) => v.clone(),
        _ => unreachable!(),
    };
    v.push(toks[1].clone());
    Ast::RulePipe(v)
}%
    | RuleItem -> {
    Ast::RulePipe(toks[..1].to_vec())
}%;

RuleItem: Ast = (IdentPath | StrLit) Optional?:opt (":" Ident:id)? -> {
    Ast::RuleItem(Box::new(toks[0].clone()), opt.is_some(), id.map(|id| id.item.span))
}%
    | "(" Rule ")" Optional?:opt (":" Ident:id)? -> {
    Ast::RuleItem(Box::new(toks[1].clone()), opt.is_some(), id.map(|id| id.item.span))
}%;

Import: Ast = "use" (IdentPath "::" "*" | IdentPath) -> {
    Ast::Import(Span::new(toks[1].item.span.start, toks.last().unwrap().item.span.end))
}%;

Alias: Ast = "alias" (Ident | StrLit) IdentPath -> {
    Ast::Alias(toks[1].item.span, toks[2].item.span)
}%;
