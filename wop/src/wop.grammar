use wop::Token;

token "*=" Token::VarSpec;
token "+=" Token::RepSpec;
token "=" Token::NormalSpec;
token "?=" Token::OptSpec;

token ":" Token::Type;
token "@" Token::MetaAttr;
token "~" Token::BoxAttr;
token "|" Token::Or;
token "::" Token::PathAccess;
token ";" Token::Sep;
token Ident Token::Ident;
token StrLit Token::StrLit;
token CodeExpr Token::CodeExpr;

Program = Program Declaration Sep | Declaration Sep;

Declaration = TokenDecl | UseDecl | RuleDecl;

TokenDecl = TokenWord (StrLit | Ident) IdentPath;

IdentPath = (IdentPath PathAccess)? Ident;

UseDecl = UseWord IdentPath;

AssignOp = VarSpec | RepSpec | OptSpec | NormalSpec;

AttrPrefix = MetaAttr
    | BoxAttr
    | MetaAttr AttrPrefix
    | BoxAttr AttrPrefix;

AttrSuffix = Opt | Var | Rep;

VarPipe = Type Ident;

TypeDecl = Type IdentPath;

ElmBase = Ident VarPipe?
    | OpenParen RulePipe CloseParen VarPipe?;

Elm = AttrPrefix? ElmBase AttrSuffix?;

Prod = Prod? Elm CodeExpr?;

RulePipe = (Prod Or)* Prod;

RuleDecl = Ident TypeDecl? AssignOp RulePipe;
